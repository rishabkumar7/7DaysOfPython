{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to 7DaysOfPython","text":""},{"location":"#about-this-project","title":"About this project","text":"<p>Hey there, I'd like to start by saying that I created this repository as a resource for those who are new to Python and want to learn it for Cloud Computing or DevOps career. However, I'd like to emphasise that using you cannot become a Python expert in 7 days, and this repository does not automatically turn you into a Python expert. It is only a starting point for you to gain a basic understanding of the language and some related concepts. Python is a vast and ever-changing language, and becoming an expert takes time and practise. I hope this disclaimer clears up any misunderstandings and assists you in approaching this resource with realistic expectations. Happy studying!</p>"},{"location":"#layout","title":"Layout","text":"Days Topic Day 1 Introduction to Python Day 2 Python Loops, functions, modules and libraries Day 3 Python Data Structures and OOP Day 4 Debugging, testing and Regular expression Day 5 Web development in Python Day 6 Automation with Python Day 7 Let's build an App in Python"},{"location":"days/day1/","title":"Day 1 - Introduction to Python","text":"<p>Guido van Rossum created Python, a high-level, interpreted and dynamic programming language, in the late 1980s. It is widely used in range of applications, including web development, devops and data analysis, as well as artificial intelligence and machine learning.</p>"},{"location":"days/day1/#installation-and-setting-up-the-environment","title":"Installation and Setting up the Environment:","text":"<p>Python is available for download and installation on a variety of platforms, including Windows, Mac, and Linux. Python can be downloaded from the official website. </p> <p>Following the installation of Python, you can configure your environment with an Integrated Development Environment (IDE) such as PyCharm, Visual Studio Code, or IDLE (the default IDE that comes with Python). I personally use Visual Studio Code.</p> <p>You can also use cloud environment, where you will not have to configure and install python locally, like Replit. </p>"},{"location":"days/day1/#basic-data-types","title":"Basic Data Types:","text":"<p>Python includes a number of built-in data types for storing and manipulating data. The following are the most common ones:</p> <ul> <li>Numbers: integers, floating-point numbers, and complex numbers</li> <li>Strings are character sequences.</li> <li>Lists are ordered groups of elements.</li> <li>Tuples are ordered immutable collections of elements.</li> <li>Dictionaries are collections of key-value pairs that are not ordered.</li> </ul>"},{"location":"days/day1/#operations-and-expressions","title":"Operations and Expressions:","text":"<p>With the above data types, you can perform a variety of operations in Python, including arithmetic, comparison, and logical operations. Expressions can also be used to manipulate data, such as combining multiple values into a new value.</p>"},{"location":"days/day1/#variables","title":"Variables:","text":"<p>A variable is declared and assigned a value in Python by using the assignment operator =. The variable is on the left side of the operator, and the value being assigned is on the right, which can be an expression like <code>2 + 2</code> or even other variables. As an example:</p> <pre><code>a = 7         # assign variable a the value 7\nb = x + 3     # assign variable b the value of a plus 3\nc = b         # assign variable c the value of b\n</code></pre> <p>These examples assign numbers to variables, but numbers are only one of the data types supported by Python. There is no type declaration for the variables. This is due to the fact that Python is a dynamically typed language, which means that the variable type is determined by the data assigned to it. The x, y, and z variables in the preceding examples are integer types, which can store both positive and negative whole numbers.</p> <p>Variable names are case sensitive and can contain any letter, number, or underscore ( ). They cannot, however, begin with a number. Also, with numbers, strings are among the most commonly used data types. A string is a sequence of one or more characters. Strings are typically declared with single quotation marks, but they can also be declared with double quotation marks:</p> <pre><code>a = 'My name is Rishab'\nb = \"This is also a string\"\n</code></pre> <p>You can add strings to other strings \u2014 an operation known as \"concatenation\" \u2014 with the same + operator that adds two numbers:</p> <pre><code>x = 'My name is' + ' ' + 'Rishab'\nprint(x) # outputs: My name is Rishab\n</code></pre>"},{"location":"days/day1/#printing-to-the-console","title":"Printing to the console:","text":"<p>The print function in Python is one of more than 60 built-in functions. It outputs text to the screen. Let's see an example of the most famous \"Hello World!\":</p> <pre><code>print('Hello World!')\n</code></pre> <p>The print argument is a string, which is one of Python's basic data types for storing and managing text. Print outputs a newline character at the end of the line by default, so subsequent calls to print will begin on the next line.</p>"},{"location":"days/day1/#resources","title":"Resources:","text":"<ul> <li>Learn Python - Full course by freeCodeCamp</li> <li>Python tutorial for beginners by Nana</li> <li>Python Crash Course book</li> </ul>"},{"location":"days/day2/","title":"Day 2 - Python Loops, functions, modules and libraries","text":"<p>Welcome to the second day of Python, and today we will cover some more concepts: - Loops - Functions - Modules and libraries - File I/O</p>"},{"location":"days/day2/#loops-forwhile","title":"Loops (for/while):","text":"<p>Loops are used to repeatedly run a block of code.</p>"},{"location":"days/day2/#for-loop","title":"for loop","text":"<p>Using the <code>for</code> loop, a piece of code is executed once for each element of a sequence (such as a list, string, or tuple). Here is an example of a for loop that prints each programming language in a list:</p> <pre><code>languages = ['Python', 'Go', 'JavaScript']\n\n# for loop\nfor language in languages:\n    print(language)\n</code></pre> <p>Output <pre><code>Python\nGo\nJavaScript\n</code></pre></p>"},{"location":"days/day2/#while-loop","title":"while loop","text":"<p>The <code>while loop</code> is used to execute a block of code repeatedly as long as a condition is True. Here's an example of a while loop that prints the numbers from 1 to 5:</p> <pre><code>i = 1\nn = 5\n\n# while loop from i = 1 to 5\nwhile i &lt;= n:\n    print(i)\n    i = i + 1\n</code></pre> <p>Output: <pre><code>1\n2\n3\n4\n5\n</code></pre></p>"},{"location":"days/day2/#functions","title":"Functions","text":"<p>Functions are reusable chunks of code with argument/parameters and return values. Using the <code>def</code> keyword in Python, you can define a function. In your programme, functions can be used to encapsulate complex logic and can be called several times. Functions can also be used to simplify code and make it easier to read. Here is an illustration of a function that adds two numbers:</p> <pre><code># function has two arguments num1 and num2\ndef add_numbers(num1, num2):\n    sum = num1 + num2\n    print('The sum is: ',sum)\n</code></pre> <pre><code># calling the function with arguments to add 5 and 2\nadd_numbers(5, 2)\n\n# Output: The sum is: 9\n</code></pre>"},{"location":"days/day2/#understanding-modules-and-importing-libraries","title":"Understanding Modules and Importing Libraries:","text":"<p>A module is a file in Python that contains definitions and statements. Modules let you arrange your code and reuse it across many apps. The Standard Library, a sizable collection of Python modules, offers a wide range of capabilities, such as file I/O, regular expressions, and more. Additional libraries can be installed using package managers like pip. You must import a module or library using the import statement in order to use it in your programme. Here is an illustration of how to load the math module and calculate a number's square root using the sqrt() function:</p> <pre><code>import math\n\nprint(math.sqrt(16)) # 4.0\n</code></pre>"},{"location":"days/day2/#file-io","title":"File I/O","text":"<p>File I/O is used to read and write data to and from files on disk. The built-in Python function open() can be used to open a file, after which you can read from and write to it using methods like read() and write(). To save system resources, you should always close the file after you are done with it. An example of reading from a file and printing its content:</p> <pre><code>f = open(\"90DaysOfDevOps.txt\", \"r\")\nprint(f.read())\nf.close()\n</code></pre>"},{"location":"days/day2/#exception-handling","title":"Exception Handling:","text":"<p>Exceptions are runtime errors that happen when your programme runs into unexpected circumstances, such dividing by zero or attempting to access a list element that doesn't exist. Using a try/except block, you can manage exceptions in Python. The try block's code is run, and if an exception arises, the except block's code is run to handle the exception.</p> <pre><code>try:\n  f = open(\"90DaysOfDevOps.txt\")\n  try:\n    f.write(\"Python is great\")\n  except:\n    print(\"Something went wrong when writing to the file\")\n</code></pre>"},{"location":"days/day2/#conclusion","title":"Conclusion","text":"<p>That is it for today, I will see you tomorrow in Day 3 of Python!</p>"},{"location":"days/day3/","title":"Day 3 - Python Data Structures and OOP","text":"<p>Welcome to the third day of Python, and today we will cover some more advanced concepts:</p> <ul> <li>Data Structures</li> <li>Object Oriented Programming (OOP)</li> </ul>"},{"location":"days/day3/#data-structures","title":"Data Structures:","text":"<p>Python includes a number of data structures for storing and organizing data. The following are some of the most common ones:</p>"},{"location":"days/day3/#lists","title":"Lists:","text":"<p>Lists are used to store multiple items in a single variable. They can hold any type of collection of items (including other lists), and their elements can be accessed via an index. Lists are mutable, which means they can be changed by adding, removing, or changing elements. Here's an example of how to make a list and access its elements:</p> <pre><code>thislist = [\"apple\", \"banana\", \"orange\"]\nprint(thislist[0]) # OUTPUT apple\nprint(thislist[2]) # OUTPUT orange\n</code></pre>"},{"location":"days/day3/#tuples","title":"Tuples:","text":"<p>Tuples are similar to lists, but they are immutable, which means they cannot be changed once created. They are frequently used to represent fixed sets of data. Tuples can be created with or without parentheses, but they are typically used to make the code more readable. Here's an example of a tuple and how to access its elements:</p> <pre><code>my_tuple = (1, 2, \"three\", [4, 5])\nprint(my_tuple[0])   # OUTPUT 1\nprint(my_tuple[2])   # OUTPUT \"three\"\nprint(my_tuple[3][0]) # OUTPUT 4\n</code></pre>"},{"location":"days/day3/#dictionaries","title":"Dictionaries:","text":"<p>Dictionaries are yet another versatile Python data structure that stores a collection of key-value pairs. The keys must be unique and unchangeable (strings and numbers are common), and the values can be of any type. Dictionaries can be changed by adding, removing, or changing key-value pairs. Here's an example of creating and accessing a dictionary's values:</p> <pre><code>my_dict = {\"name\": \"Rishab\", \"project\": \"90DaysOfDevOps\", \"country\": \"Canada\"}\nprint(my_dict[\"name\"])   # OUTPUT \"Rishab\"\nprint(my_dict[\"project\"])   # OUTPUT \"90DaysOfDevOps\"\nprint(my_dict[\"country\"])  # OUTPUT \"Canada\"\n</code></pre>"},{"location":"days/day3/#sets","title":"Sets:","text":"<p>Sets are used to store multiple items in a single variable. They are frequently used in mathematical operations such as union, intersection, and difference. Sets are mutable, which means they can be added or removed, but the elements themselves must be immutable and sets cannot have two items with the same value. Here's an example of how to make a set and then perform operations on it:</p> <pre><code>my_set = {1, 2, 3, 4, 5}\nother_set = {3, 4, 5, 6, 7}\nprint(my_set.union(other_set))  # {1, 2, 3, 4, 5, 6, 7}\nprint(my_set.intersection(other_set)) # {3, 4, 5}\nprint(my_set.difference(other_set))  # {1, 2}\n</code></pre>"},{"location":"days/day3/#object-oriented-programming","title":"Object Oriented Programming:","text":"<p>I also want to talk about object-oriented programming (OOP) concepts in Python, which are used to structure code into reusable and modular components, in addition to data structures. Here are some of the most important OOP concepts to understand:</p>"},{"location":"days/day3/#class","title":"Class","text":"<p>A class is a template for creating objects. A class specifies the attributes (data) and methods (functions) that a class's objects can have. Classes are defined using the <code>class</code> keyword, and objects are created using the class constructor. Here's an example of defining a <code>Person</code> class and creating an object of that class:</p> <pre><code>class Person:\n    def __init__(self, name, country):\n        self.name = name\n        self.country = country\nperson = Person(\"Rishab\", \"Canada\")\nprint(person.name)   # OUTPUT \"Rishab\"\nprint(person.country)    # OUTPUT \"Canada\"\n</code></pre>"},{"location":"days/day3/#inheritance","title":"Inheritance:","text":"<p>Inheritance is a technique for creating a new class from an existing one. The new class, known as a subclass, inherits the attributes and methods of the existing superclass. Subclasses can extend or override the superclass's attributes and methods to create new functionality. Here's an example of defining a <code>Person</code> subclass called <code>Student</code>:</p> <pre><code>class Student(Person):\n    def __init__(self, name, country, major):\n        super().__init__(name, country)\n        self.major = major\n\nstudent = Student(\"Rishab\", \"Canada\", \"Computer Science\")\nprint(student.name)   # OUTPUT \"Rishab\"\nprint(student.country)    # OUTPUT \"Canada\"\nprint(student.major)  # OUTPUT \"Computer Science\"\n</code></pre>"},{"location":"days/day3/#polymorphism","title":"Polymorphism:","text":"<p>Polymorphism refers to the ability of objects to take on different forms or behaviors depending on their context. Polymorphism can be achieved by using inheritance and method overriding, as well as abstract classes and interfaces. Here's an example of a speak() method being implemented in both the Person and Student classes:</p> <pre><code>class Person:\n    def __init__(self, name, country):\n        self.name = name\n        self.country = country\n\n    def speak(self):\n        print(\"Hello, my name is {} and I am from {}.\".format(self.name, self.country))\n\nclass Student(Person):\n    def __init__(self, name, country, major):\n        super().__init__(name, country)\n        self.major = major\n\n    def speak(self):\n        print(\"Hello, my name is {} and I am a {} major.\".format(self.name, self.major))\n\nperson = Person(\"Rishab\", \"Canada\")\nstudent = Student(\"John\", \"Canada\", \"Computer Science\")\n\nperson.speak()   # \"Hello, my name is Rishab and I am from Canada.\"\nstudent.speak()  # \"Hello, my name is John and I am a Computer Science major.\"\n</code></pre>"},{"location":"days/day4/","title":"Day 4 - Python: Debugging, testing and Regular expression","text":"<p>Welcome to Day 4 of Python! Today we will learn about:</p> <ul> <li>Debugging and testing</li> <li>Regular expressions</li> <li>Datetime library</li> </ul> <p>Let's start!</p>"},{"location":"days/day4/#debugging-and-testing","title":"Debugging and testing","text":"<p>Debugging is the process of finding and correcting errors or bugs in code. Python includes a debugger called <code>pdb</code> that allows you to step through your code and inspect variables as you go. You can use <code>pdb</code> to help you figure out where your code is going wrong and how to fix it.</p> <pre><code>import pdb\n\ndef add_numbers(x, y):\n    result = x + y\n    pdb.set_trace() # Start the debugger at this point in the code\n    return result\n\nresult = add_numbers(2, 3)\nprint(result)\n</code></pre> <p>In this example, we define the <code>add_numbers</code> function, which adds two numbers and returns the result. To start the debugger at a specific point in the code, we use the pdb.set trace() function (in this case, after the result has been calculated). This enables us to inspect variables and step through the code to figure out what's going on.</p> <p>In addition to debugging, testing is an important part of programming. It entails creating test cases to ensure that your code is working properly. Python includes a <code>unittest</code> module that provides a framework for writing and running test cases.</p> <pre><code>import unittest\n\ndef is_prime(n):\n    if n &lt; 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nclass TestIsPrime(unittest.TestCase):\n    def test_is_prime(self):\n        self.assertTrue(is_prime(2))\n        self.assertTrue(is_prime(3))\n        self.assertTrue(is_prime(5))\n        self.assertFalse(is_prime(4))\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Output:</p> <pre><code>----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n</code></pre>"},{"location":"days/day4/#regular-expressions","title":"Regular expressions:","text":"<p>In Python, regular expressions are a powerful tool for working with text data. They enable you to search for and match specific character patterns within a string. Python's <code>re</code> module includes functions for working with regular expressions. For example, you can use regular expressions to search for email addresses within a larger block of text, or to extract specific data from a string that follows a particular pattern.</p> <pre><code>import re\n\n# Search for a phone number in a string\ntext = 'My phone number is 555-7777'\nmatch = re.search(r'\\d{3}-\\d{4}', text)\nif match:\n    print(match.group(0))\n\n# Extract email addresses from a string\ntext = 'My email is example@devops.com, but I also use other@cloud.com'\nmatches = re.findall(r'\\S+@\\S+', text)\nprint(matches)\n</code></pre> <p>Output:</p> <pre><code>555-7777\n['example@devops.com,', 'other@cloud.com']\n</code></pre>"},{"location":"days/day4/#datetime-library","title":"Datetime library:","text":"<p>As the name suggests, Python's <code>datetime</code> module allows you to work with dates and times in your code. It includes functions for formatting and manipulating date and time data, as well as classes for representing dates, times, and time intervals. The datetime module, for example, can be used to get the current date and time, calculate the difference between two dates, or convert between different date and time formats.</p> <pre><code>from datetime import datetime, timedelta\n\n# Get the current date and time\nnow = datetime.now()\nprint(now) # Output: 2023-02-17 11:33:27.257712\n\n# Create a datetime object for a specific date and time\ndate = datetime(2023, 2, 1, 12, 0)\nprint(date) # Output: 2023-02-01 12:00:00\n\n# Calculate the difference between two dates\ndelta = now - date\nprint(delta) # Output: 15 days, 23:33:27.257712\n</code></pre> <p>Output:</p> <pre><code>2023-02-17 11:33:27.257712\n2023-02-01 12:00:00\n15 days, 23:33:27.257712\n</code></pre>"},{"location":"days/day4/#resources","title":"Resources","text":"<ul> <li>pdb - The Python Debugger</li> <li>re - Regular expressions operations</li> <li>datetime - Basic date and time types</li> </ul>"},{"location":"days/day5/","title":"Day 5 - Web development in Python","text":"<p>Python is quite capable when it comes to web development, and there are a variety of frameworks and modules are available for it. These can be used to create web applications. Flask, Django, and Pyramid are a few well-known frameworks. The choice of framework will rely on the project's requirements. Each of these frameworks has advantages and disadvantages of its own.</p>"},{"location":"days/day5/#creating-a-basic-web-app-using-flask","title":"Creating a basic web app using Flask","text":"<p>Creating a basic web application using Flask: Flask is a micro web framework for Python that is easy to learn and use. It provides a simple way to create web applications and APIs using Python. Here are some examples of Flask code for creating a basic web application:</p> <p><pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!' \n</code></pre> This code creates a Flask application and defines a single route for the root URL (/). When the user visits the URL, the hello_world() function is called and returns the string 'Hello, World!'.</p>"},{"location":"days/day5/#working-with-databases","title":"Working with databases","text":"<p>The majority of online applications need some sort of permanent storage, and Python offers a number of modules and frameworks for doing so. Popular options include Django ORM, Peewee, and SQLAlchemy. Here is an illustration of how to work with a SQLite database using SQLAlchemy:</p> <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50))\n\n@app.route('/')\ndef index():\n    users = User.query.all()\n    return render_template('index.html', users=users)\n</code></pre> <p>This code creates a SQLite database and a User table using SQLAlchemy. The index() function queries the database for all users and passes them to the template for rendering.</p> <p>Having a good understanding of how these web apps work, will help you with automation and deployment when it comes to practicing DevOps. You can dive deeper into how you can build APIs using Python and serverless technologies like AWS Lambda, Azure Functions etc.</p> <p>I have a demo on how I built a serverless resume API.</p>"},{"location":"days/day5/#building-apis-in-python","title":"Building APIs in Python","text":"<p>Creating an API (Application Programming Interface) in Python can be a straightforward process, thanks to various frameworks and libraries available. Three popular methods to set up a web API in Python: Flask, FastAPI, and Django Rest Framework.</p> <p>In the following video, I showcase all three of them:</p>"},{"location":"days/day6/","title":"Day 6 - Automation with Python","text":"<p>Using Python for infrastructure management involves automating the management of IT infrastructure, such as servers, databases, and networking equipment. This can include tasks like provisioning, configuration, and orchestration. Python is a popular language for infrastructure management, and there are several tools and libraries available to help with this. Some popular tools for infrastructure management that use Python include:</p> <ul> <li>Fabric</li> <li>PyWinRM</li> <li>Pulumi</li> </ul>"},{"location":"days/day6/#fabric","title":"Fabric","text":"<p>Fabric is a Python library that can be used for streamlining SSH commands and remote execution of scripts, which can be used to automate server configuration and deployment. Here is an example in which we will be using the Fabric library to connect to a remote server using SSH, and then run the <code>ls -l</code> command on the remote server. The output of the command will be printed to the console.</p> <pre><code>from fabric import Connection\n\n# Connect to the remote server\nc = Connection('user@remote.host')\n\n# Run a command on the remote server\nresult = c.run('ls -l')\n\n# Print the output of the command\nprint(result.stdout)\n</code></pre>"},{"location":"days/day6/#pywinrm","title":"PyWinRM","text":"<p>A Python library that can be used to automate Windows Remote Management tasks, which can be used to automate Windows server configuration and management.</p>"},{"location":"days/day6/#pulumi","title":"Pulumi","text":"<p>Pulumi is a cloud infrastructure as code (CIaC) tool that lets you define and manage cloud resources in a variety of programming languages, including Python.</p> <p>You can use Pulumi to write Python code to describe your infrastructure as code, and then use the Pulumi CLI to deploy and manage it. Here is an example:</p> <pre><code>import pulumi\nfrom pulumi_aws import ec2\n\n# Define an EC2 instance\nserver = ec2.Instance('server',\n    instance_type='t2.micro',\n    ami='ami-0c55b159cbfafe1',\n    tags={\n        'Name': 'cloud-server',\n    },\n)\n\n# Export the server's IP address\npulumi.export('ip_address', server.public_ip)\n</code></pre> <p>In this example, we're using the Pulumi Python SDK to define an EC2 instance on AWS. We specify the instance type, the AMI ID, and some tags for the instance, and then export the instance's public IP address. ou can then use the Pulumi CLI to deploy this infrastructure, which will create the EC2 instance on AWS. You can also use the Pulumi CLI to manage your infrastructure over time, making changes and updates as needed.</p>"},{"location":"days/day6/#resources","title":"Resources:","text":"<ul> <li>Learn more about Fabric</li> <li>PyWinRM</li> <li>Pulumi - IaC Tool</li> </ul>"},{"location":"days/day7/","title":"Day 7 - Let's build an App in Python","text":"<p>Let's create a simple blog app with the help of Flask that supports posts in markdown.</p>"},{"location":"days/day7/#initiating-virtual-env-and-installing-packages","title":"Initiating virtual env and installing packages","text":"<p>Let's create a directory for our blog project. After you have created your project directory, create virtual environment using the following commands:</p> <ul> <li>Windows</li> </ul> <pre><code>c:\\&gt;python -m venv c:\\path\\to\\myenv\n</code></pre> <ul> <li>Linux//MacOs</li> </ul> <pre><code>python3 -m venv /path/to/new/virtual/environment\n</code></pre> <p>Activate the virtual environment:</p> <ul> <li>Windows cmd</li> </ul> <pre><code>C:\\&gt; &lt;venv&gt;\\Scripts\\activate.bat\n</code></pre> <ul> <li>Windows powershell</li> </ul> <pre><code>&lt;venv&gt;\\Scripts\\Activate.ps1\n</code></pre> <ul> <li>Linux//MacOs</li> </ul> <pre><code>source &lt;venv&gt;/bin/activate\n</code></pre> <p>Now let's use <code>pip</code> to install required modules and packages that we will be using in this project.</p> <pre><code>pip install flask markdown\n</code></pre>"},{"location":"days/day7/#creating-the-flask-app","title":"Creating the flask app","text":"<p>First, create a new Flask app, by creating a file in root of the project directory called <code>main.py</code>:</p> <pre><code>from flask import Flask, render_template\nimport markdown\n\napp = Flask(__name__)\n</code></pre> <p>Define a route for the home page:</p> <pre><code>@app.route('/')\ndef home():\n    return render_template('index.html')\n</code></pre> <p>Define a route to handle requests for individual blog posts:</p> <pre><code>@app.route('/posts/&lt;path:path&gt;')\ndef post(path):\n    with open(f'posts/{path}.md', 'r') as file:\n        content = file.read()\n        html = markdown.markdown(content)\n        return render_template('post.html', content=html)\n</code></pre> <p>Create templates for the home page and individual blog posts, we can do this by creating a new directory in root of project called <code>templates</code>. And then further create the two following <code>html</code> files:</p> <ul> <li><code>index.html</code>:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Blog&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;My Blog&lt;/h1&gt;\n    {% for post in posts %}\n    &lt;h2&gt;&lt;a href=\"/posts/{{ post }}\"&gt;{{ post }}&lt;/a&gt;&lt;/h2&gt;\n    {% endfor %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li><code>post.html</code>:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ title }}&lt;/h1&gt;\n    &lt;div&gt;{{ content|safe }}&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Modify the home route to display a list of blog post titles:</p> <pre><code>@app.route('/')\ndef home():\n    posts = []\n    for file in os.listdir('posts'):\n        if file.endswith('.md'):\n            title = file[:-3]\n            posts.append(title)\n    return render_template('index.html', posts=posts)\n</code></pre>"},{"location":"days/day7/#adding-markdown-posts","title":"Adding markdown posts","text":"<p>Now before running the app, let's add few posts. Create a directory called <code>posts</code> and add some Markdown files with blog post content. Let's add a <code>hello.md</code>:</p> <pre><code># Hello\n\nThis is my first blog post\n### Heading level 3\n#### Heading level 4\n##### Heading level 5\n###### Heading level 6\n\nI just love **bold text**.\n</code></pre> <p>Now, let's run the app, type the following command:</p> <pre><code>python main.py\n</code></pre> <p>And you should see the following output in the termainal:</p> <pre><code>\ue285 python main.py                                                                                                                * Serving Flask app 'main'                                                                                                     * Debug mode: on                                                                                                              WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.         \n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n</code></pre> <p>Here is how it would look, I have 2 blog posts and have some gifs in my blog posts. Navigate to <code>127.0.0.0:5000</code> in a browser window:</p> <p></p> <p>If we click on the <code>hello</code> blog post:</p> <p></p>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#an-api-for-your-favorite-tv-show","title":"An API for your favorite TV Show","text":"<p>I wanted to build an API Project and here is an idea for you too - An API for your favorite TV show. I am fan of the Peaky Blinders, so built an API using FastAPI in Python.</p> <p>GitHub Repo: https://github.com/rishabkumar7/peaky-blinders-api</p> <p>Additional projects coming soon.</p>"}]}